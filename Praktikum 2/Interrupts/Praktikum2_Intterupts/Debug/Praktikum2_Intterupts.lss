
Praktikum2_Intterupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018e  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075a  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000692  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cd  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 30       	cpi	r26, 0x03	; 3
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:

bool blink = true;                                                                                                                                                                               ;
bool led0 = false;

ISR(INT0_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	if(led0)
  b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  b8:	88 23       	and	r24, r24
  ba:	39 f0       	breq	.+14     	; 0xca <__vector_1+0x24>
	{
		blink=!blink;
  bc:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	89 27       	eor	r24, r25
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <__vector_1+0x2e>
	}
	else
	{
		blink=true;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		led0=true;
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	}
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_2>:

ISR(INT1_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	if(!led0)
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f4:	81 11       	cpse	r24, r1
  f6:	07 c0       	rjmp	.+14     	; 0x106 <__vector_2+0x24>
	{
		blink=!blink;
  f8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	89 27       	eor	r24, r25
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 104:	05 c0       	rjmp	.+10     	; 0x110 <__vector_2+0x2e>
	}
	else
	{
		blink=true;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		led0=false;
 10c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:

int main(void)
{
	cli();
 11e:	f8 94       	cli
	DDRB = 0xff; 
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		
 124:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x00;
 126:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xff; //D2 und D3 Eingänge
 128:	8b b9       	out	0x0b, r24	; 11
	
	EICRA |= 0b1010; //Triggert Interrupt bei sinkender flanke (low active taster)
 12a:	e9 e6       	ldi	r30, 0x69	; 105
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8a 60       	ori	r24, 0x0A	; 10
 132:	80 83       	st	Z, r24
	EIMSK |= 0b11; //Aktiviert externe Interrupts INT0 und INT1
 134:	8d b3       	in	r24, 0x1d	; 29
 136:	83 60       	ori	r24, 0x03	; 3
 138:	8d bb       	out	0x1d, r24	; 29
	sei();
 13a:	78 94       	sei
				else
				{
					if (blink)
					{
						PORTB &= ~(1 << 0);
						PORTB ^= (1 << 1);
 13c:	22 e0       	ldi	r18, 0x02	; 2
				if (led0)
				{
					if (blink)
					{
						PORTB &= ~(1 << 1);
						PORTB ^= (1 << 0);
 13e:	91 e0       	ldi	r25, 0x01	; 1
	EIMSK |= 0b11; //Aktiviert externe Interrupts INT0 und INT1
	sei();
		
    while (1) 
    {
				if (led0)
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 144:	88 23       	and	r24, r24
 146:	61 f0       	breq	.+24     	; 0x160 <main+0x42>
				{
					if (blink)
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 14c:	88 23       	and	r24, r24
 14e:	29 f0       	breq	.+10     	; 0x15a <main+0x3c>
					{
						PORTB &= ~(1 << 1);
 150:	29 98       	cbi	0x05, 1	; 5
						PORTB ^= (1 << 0);
 152:	85 b1       	in	r24, 0x05	; 5
 154:	89 27       	eor	r24, r25
 156:	85 b9       	out	0x05, r24	; 5
 158:	0e c0       	rjmp	.+28     	; 0x176 <main+0x58>
					}
					else
					{
						PORTB &= ~(1 << 1);
 15a:	29 98       	cbi	0x05, 1	; 5
						PORTB |= (1 << 0);
 15c:	28 9a       	sbi	0x05, 0	; 5
 15e:	0b c0       	rjmp	.+22     	; 0x176 <main+0x58>
					}
				}
				else
				{
					if (blink)
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 164:	88 23       	and	r24, r24
 166:	29 f0       	breq	.+10     	; 0x172 <main+0x54>
					{
						PORTB &= ~(1 << 0);
 168:	28 98       	cbi	0x05, 0	; 5
						PORTB ^= (1 << 1);
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	82 27       	eor	r24, r18
 16e:	85 b9       	out	0x05, r24	; 5
 170:	02 c0       	rjmp	.+4      	; 0x176 <main+0x58>
					}
					else
					{
						PORTB &= ~(1 << 0);
 172:	28 98       	cbi	0x05, 0	; 5
						PORTB |= (1 << 1);
 174:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	3f ef       	ldi	r19, 0xFF	; 255
 178:	43 ec       	ldi	r20, 0xC3	; 195
 17a:	89 e0       	ldi	r24, 0x09	; 9
 17c:	31 50       	subi	r19, 0x01	; 1
 17e:	40 40       	sbci	r20, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x5e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x68>
 186:	00 00       	nop
 188:	db cf       	rjmp	.-74     	; 0x140 <main+0x22>

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
