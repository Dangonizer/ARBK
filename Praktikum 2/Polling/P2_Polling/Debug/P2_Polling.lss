
P2_Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000728  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000678  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d3  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdbool.h>


int main(void)
{
	DDRC = 0x00;
  80:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xff;
  86:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  88:	1b b8       	out	0x0b, r1	; 11
	bool blink = true;
	bool led0 = false;
  8a:	80 e0       	ldi	r24, 0x00	; 0
{
	DDRC = 0x00;
	PORTC = 0xff;
	DDRD = 0xff;
	PORTD = 0x00;
	bool blink = true;
  8c:	91 e0       	ldi	r25, 0x01	; 1
		if (led0)
		{
			if (blink)
			{
				PORTD &= ~(1 << 1);
				PORTD ^= (1 << 0); 	
  8e:	21 e0       	ldi	r18, 0x01	; 1
		else 
		{
			if (blink)
			{
				PORTD &= ~(1 << 0);
				PORTD ^= (1 << 1);
  90:	42 e0       	ldi	r20, 0x02	; 2
  92:	30 e0       	ldi	r19, 0x00	; 0
	bool led0 = false;
	
	
    while (1) 
    {
		if (!((PINC >> PINC0) & 1))
  94:	30 99       	sbic	0x06, 0	; 6
  96:	04 c0       	rjmp	.+8      	; 0xa0 <main+0x20>
		{
			if (led0)
  98:	88 23       	and	r24, r24
  9a:	61 f0       	breq	.+24     	; 0xb4 <main+0x34>
			{
				blink ^= 1;	
  9c:	92 27       	eor	r25, r18
  9e:	08 c0       	rjmp	.+16     	; 0xb0 <main+0x30>
			{
				blink = true;
				led0 = true;	
			}	
		}
		else if (!((PINC >> PINC1) & 1))
  a0:	31 99       	sbic	0x06, 1	; 6
  a2:	04 c0       	rjmp	.+8      	; 0xac <main+0x2c>
		{
			if (!led0)
  a4:	81 11       	cpse	r24, r1
  a6:	13 c0       	rjmp	.+38     	; 0xce <main+0x4e>
			{
				blink ^= 1;
  a8:	92 27       	eor	r25, r18
  aa:	0f c0       	rjmp	.+30     	; 0xca <main+0x4a>
				blink = true;
				led0 = false;
			}
		}
		
		if (led0)
  ac:	88 23       	and	r24, r24
  ae:	69 f0       	breq	.+26     	; 0xca <main+0x4a>
		{
			if (blink)
  b0:	99 23       	and	r25, r25
  b2:	39 f0       	breq	.+14     	; 0xc2 <main+0x42>
			{
				PORTD &= ~(1 << 1);
  b4:	59 98       	cbi	0x0b, 1	; 11
				PORTD ^= (1 << 0); 	
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	82 27       	eor	r24, r18
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	82 2f       	mov	r24, r18
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	10 c0       	rjmp	.+32     	; 0xe2 <main+0x62>
			}
			else 
			{
				PORTD &= ~(1 << 1);
  c2:	59 98       	cbi	0x0b, 1	; 11
				PORTD |= (1 << 0);
  c4:	58 9a       	sbi	0x0b, 0	; 11
  c6:	82 2f       	mov	r24, r18
  c8:	0c c0       	rjmp	.+24     	; 0xe2 <main+0x62>
			}
		}
		else 
		{
			if (blink)
  ca:	99 23       	and	r25, r25
  cc:	39 f0       	breq	.+14     	; 0xdc <main+0x5c>
			{
				PORTD &= ~(1 << 0);
  ce:	58 98       	cbi	0x0b, 0	; 11
				PORTD ^= (1 << 1);
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	84 27       	eor	r24, r20
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	83 2f       	mov	r24, r19
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x62>
			}
			else
			{
				PORTD &= ~(1 << 0);
  dc:	58 98       	cbi	0x0b, 0	; 11
				PORTD |= (1 << 1);
  de:	59 9a       	sbi	0x0b, 1	; 11
  e0:	83 2f       	mov	r24, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	5f ef       	ldi	r21, 0xFF	; 255
  e4:	63 ec       	ldi	r22, 0xC3	; 195
  e6:	79 e0       	ldi	r23, 0x09	; 9
  e8:	51 50       	subi	r21, 0x01	; 1
  ea:	60 40       	sbci	r22, 0x00	; 0
  ec:	70 40       	sbci	r23, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x68>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x72>
  f2:	00 00       	nop
  f4:	cf cf       	rjmp	.-98     	; 0x94 <main+0x14>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
