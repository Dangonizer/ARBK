
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091d  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d5  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044d  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f3  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  9e:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:

#include "keys.h"

void init()
{
	cli();
  a6:	f8 94       	cli
	
	DDRD=0xff; // Sevenssegment Output
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a b9       	out	0x0a, r24	; 10
	//PORTD= (1<<PIND0);
	
	DDRB=0x01;	//B0 = Signal A -> Switch between pos 0 und 1
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<< PINB1) | (1<<PINB2); // Activate pullup for B1 and B2 (Switches)
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	85 b9       	out	0x05, r24	; 5
	
	PCICR |= 0x01; // Enable interrupt
  b6:	e8 e6       	ldi	r30, 0x68	; 104
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	80 83       	st	Z, r24
	PCMSK0|=(1 << PINB1) | (1 << PINB2); // Set interrupt controllmask
  c0:	eb e6       	ldi	r30, 0x6B	; 107
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	86 60       	ori	r24, 0x06	; 6
  c8:	80 83       	st	Z, r24
	
	sei();
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <print>:
#include "sevenseg.h"
const int binpattern[10]={ 64, 121, 36, 48, 25, 18, 2, 120, 0, 16 };

void print(int number, int place)
{
	if (place == 0)
  ce:	67 2b       	or	r22, r23
  d0:	11 f4       	brne	.+4      	; 0xd6 <print+0x8>
	 PORTB &= ~(1 << PINB0);
  d2:	28 98       	cbi	0x05, 0	; 5
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <print+0xa>
	else PORTB |= (1 << PINB0);
  d6:	28 9a       	sbi	0x05, 0	; 5
	PORTD = binpattern[number];
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	fc 01       	movw	r30, r24
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9c e9       	ldi	r25, 0x9C	; 156
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <print+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <print+0x22>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <__vector_3>:
#include <avr/io.h>

volatile uint32_t counter = 0;

ISR(PCINT0_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
	if(!(PINB&(1<<PINB1)))
 106:	19 99       	sbic	0x03, 1	; 3
 108:	2c c0       	rjmp	.+88     	; 0x162 <__vector_3+0x6e>
	{
		if(counter == 0)
 10a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 10e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 112:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 116:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 11a:	89 2b       	or	r24, r25
 11c:	8a 2b       	or	r24, r26
 11e:	8b 2b       	or	r24, r27
 120:	69 f4       	brne	.+26     	; 0x13c <__vector_3+0x48>
		{
			counter= 99; 
 122:	83 e6       	ldi	r24, 0x63	; 99
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 12e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 132:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 136:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 13a:	13 c0       	rjmp	.+38     	; 0x162 <__vector_3+0x6e>
		}
		else
		counter--;
 13c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 140:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 144:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 148:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	a1 09       	sbc	r26, r1
 150:	b1 09       	sbc	r27, r1
 152:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 156:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 15a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 15e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
	if(!(PINB&(1<<PINB2)))
 162:	1a 99       	sbic	0x03, 2	; 3
 164:	29 c0       	rjmp	.+82     	; 0x1b8 <__vector_3+0xc4>
	{
		if(counter == 99)
 166:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 16a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 16e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 172:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 176:	83 36       	cpi	r24, 0x63	; 99
 178:	91 05       	cpc	r25, r1
 17a:	a1 05       	cpc	r26, r1
 17c:	b1 05       	cpc	r27, r1
 17e:	49 f4       	brne	.+18     	; 0x192 <__vector_3+0x9e>
		{
			counter = 0;  
 180:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 184:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 188:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end+0x2>
 18c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x3>
 190:	13 c0       	rjmp	.+38     	; 0x1b8 <__vector_3+0xc4>
		}
		else
		counter++;
 192:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 196:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 19a:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 19e:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 1d       	adc	r26, r1
 1a6:	b1 1d       	adc	r27, r1
 1a8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1ac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1b0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 1b4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
}
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <main>:

int main(void)
{
	init();
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	
	while (1)
	{
		int digit0 = counter % 10; // Get first digit by using Modulo
 1ce:	0f 2e       	mov	r0, r31
 1d0:	fa e0       	ldi	r31, 0x0A	; 10
 1d2:	4f 2e       	mov	r4, r31
 1d4:	51 2c       	mov	r5, r1
 1d6:	61 2c       	mov	r6, r1
 1d8:	71 2c       	mov	r7, r1
 1da:	f0 2d       	mov	r31, r0
 1dc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 1e0:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 1e4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 1e8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 1ec:	a3 01       	movw	r20, r6
 1ee:	92 01       	movw	r18, r4
 1f0:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodsi4>
 1f4:	6b 01       	movw	r12, r22
 1f6:	7c 01       	movw	r14, r24
		int digit1 = (counter-digit0) / 10 ; //Get second digit by removing first digit and dividing by 10
 1f8:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <__data_end>
 1fc:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <__data_end+0x1>
 200:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <__data_end+0x2>
 204:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <__data_end+0x3>
		
		print(digit0,0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	c6 01       	movw	r24, r12
 20e:	0e 94 67 00 	call	0xce	; 0xce <print>
		print(digit1,1);
 212:	0d 2c       	mov	r0, r13
 214:	00 0c       	add	r0, r0
 216:	ee 08       	sbc	r14, r14
 218:	ff 08       	sbc	r15, r15
 21a:	c5 01       	movw	r24, r10
 21c:	b4 01       	movw	r22, r8
 21e:	6c 19       	sub	r22, r12
 220:	7d 09       	sbc	r23, r13
 222:	8e 09       	sbc	r24, r14
 224:	9f 09       	sbc	r25, r15
 226:	a3 01       	movw	r20, r6
 228:	92 01       	movw	r18, r4
 22a:	0e 94 1d 01 	call	0x23a	; 0x23a <__udivmodsi4>
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	c9 01       	movw	r24, r18
 234:	0e 94 67 00 	call	0xce	; 0xce <print>
 238:	d1 cf       	rjmp	.-94     	; 0x1dc <main+0x12>

0000023a <__udivmodsi4>:
 23a:	a1 e2       	ldi	r26, 0x21	; 33
 23c:	1a 2e       	mov	r1, r26
 23e:	aa 1b       	sub	r26, r26
 240:	bb 1b       	sub	r27, r27
 242:	fd 01       	movw	r30, r26
 244:	0d c0       	rjmp	.+26     	; 0x260 <__udivmodsi4_ep>

00000246 <__udivmodsi4_loop>:
 246:	aa 1f       	adc	r26, r26
 248:	bb 1f       	adc	r27, r27
 24a:	ee 1f       	adc	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	a2 17       	cp	r26, r18
 250:	b3 07       	cpc	r27, r19
 252:	e4 07       	cpc	r30, r20
 254:	f5 07       	cpc	r31, r21
 256:	20 f0       	brcs	.+8      	; 0x260 <__udivmodsi4_ep>
 258:	a2 1b       	sub	r26, r18
 25a:	b3 0b       	sbc	r27, r19
 25c:	e4 0b       	sbc	r30, r20
 25e:	f5 0b       	sbc	r31, r21

00000260 <__udivmodsi4_ep>:
 260:	66 1f       	adc	r22, r22
 262:	77 1f       	adc	r23, r23
 264:	88 1f       	adc	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	1a 94       	dec	r1
 26a:	69 f7       	brne	.-38     	; 0x246 <__udivmodsi4_loop>
 26c:	60 95       	com	r22
 26e:	70 95       	com	r23
 270:	80 95       	com	r24
 272:	90 95       	com	r25
 274:	9b 01       	movw	r18, r22
 276:	ac 01       	movw	r20, r24
 278:	bd 01       	movw	r22, r26
 27a:	cf 01       	movw	r24, r30
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
