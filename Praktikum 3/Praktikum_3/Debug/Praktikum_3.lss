
Praktikum_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000206  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000771  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000174b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  88:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile uint32_t systemClock = 0;

ISR(TIMER0_COMPA_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	systemClock++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  aa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ae:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	a1 1d       	adc	r26, r1
  b6:	b1 1d       	adc	r27, r1
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <waitFor>:

void waitFor(uint32_t ms){
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
	uint32_t time = systemClock + ms;
  de:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
  e2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
  e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
  ea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
  ee:	ab 01       	movw	r20, r22
  f0:	bc 01       	movw	r22, r24
  f2:	40 0f       	add	r20, r16
  f4:	51 1f       	adc	r21, r17
  f6:	62 1f       	adc	r22, r18
  f8:	73 1f       	adc	r23, r19
	while(!(systemClock == time)){
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 102:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 106:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 10a:	48 17       	cp	r20, r24
 10c:	59 07       	cpc	r21, r25
 10e:	6a 07       	cpc	r22, r26
 110:	7b 07       	cpc	r23, r27
 112:	99 f7       	brne	.-26     	; 0xfa <waitFor+0x20>
	}
}
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <waitUntil>:

void waitUntil(uint32_t ms){
 11a:	ab 01       	movw	r20, r22
 11c:	bc 01       	movw	r22, r24
	while(systemClock < ms){	
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 126:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 12a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 12e:	84 17       	cp	r24, r20
 130:	95 07       	cpc	r25, r21
 132:	a6 07       	cpc	r26, r22
 134:	b7 07       	cpc	r27, r23
 136:	98 f3       	brcs	.-26     	; 0x11e <waitUntil+0x4>
	}
}
 138:	08 95       	ret

0000013a <main>:

int main(void)
{
	cli();
 13a:	f8 94       	cli
	DDRD = 0xff;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 140:	1b b8       	out	0x0b, r1	; 11
	TCCR0A = (1 << WGM01);
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;								
 14a:	99 ef       	ldi	r25, 0xF9	; 249
 14c:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A);
 14e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	systemClock = 4294967295 - 3000;
 152:	87 e4       	ldi	r24, 0x47	; 71
 154:	94 ef       	ldi	r25, 0xF4	; 244
 156:	af ef       	ldi	r26, 0xFF	; 255
 158:	bf ef       	ldi	r27, 0xFF	; 255
 15a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 162:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 166:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	sei();
 16a:	78 94       	sei
	waitUntil(4294967295 - 1000);
 16c:	67 e1       	ldi	r22, 0x17	; 23
 16e:	7c ef       	ldi	r23, 0xFC	; 252
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	9f ef       	ldi	r25, 0xFF	; 255
 174:	0e 94 8d 00 	call	0x11a	; 0x11a <waitUntil>
    while (1) 
    {
		PORTD ^= 1;
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	8c 27       	eor	r24, r28
 17e:	8b b9       	out	0x0b, r24	; 11
		waitFor(2000);
 180:	60 ed       	ldi	r22, 0xD0	; 208
 182:	77 e0       	ldi	r23, 0x07	; 7
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 6d 00 	call	0xda	; 0xda <waitFor>
 18c:	f6 cf       	rjmp	.-20     	; 0x17a <main+0x40>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
